#!/bin/bash

# Copyright 2022 Stock Parfait

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Stop the script on the first error.
trap 'runtests failed on line ${LINENO}"; exit 1' ERR

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "${ROOT}"

echo "Activating Go environment in ${ROOT}"
source "${ROOT}/bin/bashrc"

if [ "$TEST_RECORD" = "1" ]; then
    echo "*** Running tests in RECORD mode ***"
fi

echo "GOROOT: `go env GOROOT`"
echo "GOPATH: `go env GOPATH`"

modules=("src")

COVERAGE_PROFILE="${ROOT}/.coverage"
COVERAGERC=".coveragerc"
COVERAGE_HTML="coverage.html"
DEFAULT_MIN_COVERAGE=75

tests_failed=()
coverage_low=()
code_warnings=()
rm -f "$COVERAGE_PROFILE"
GOTEST_ARGS=()

for d in "${modules[@]}"; do
    path="${ROOT}/${d}"
    cd "$path"
    if ! go test -coverprofile "${COVERAGE_PROFILE}_tmp" "${GOTEST_ARGS[@]}" ./...; then
	tests_failed=("${tests_failed[@]}" "$path")
    fi
    go tool cover -html="${COVERAGE_PROFILE}_tmp" -o "${COVERAGE_HTML}"
    echo "Wrote ${path}/${COVERAGE_HTML} - open in a browser to see coverage."
    if [ -f "${path}/${COVERAGERC}" ]; then
	min_coverage=`jsonread "${path}/${COVERAGERC}" min_coverage "$DEFAULT_MIN_COVERAGE"`
    else
	min_coverage="$DEFAULT_MIN_COVERAGE"
    fi
    if [ -f "${COVERAGE_PROFILE}_tmp" ]; then
	if ! gocovcheck "${COVERAGE_PROFILE}_tmp" "$min_coverage"; then
	    coverage_low=("${coverage_low[@]}" "$d")
	fi
	cat "${COVERAGE_PROFILE}_tmp" >> "$COVERAGE_PROFILE"
	rm -f "${COVERAGE_PROFILE}_tmp"
    fi

    if ! go vet ./... ; then
	code_warnings=("${code_warnings[@]}" "go vet has warnings")
    fi
    # golint returns code 0 even when it fails. We'd have to check its output,
    # and run it again to print warnings to stdout.
    if [[ ! -z $(golint ./...) ]] ; then
	code_warnings=("${code_warnings[@]}" "golint has warnings")
	golint ./...
    fi
    if [ ! -z $(gofmt -l -s .) ]; then
	echo "WARNING: the following files are not formatted correctly:"
	gofmt -l -s .
	echo "Please run 'make gofmt'."
	code_warnings=("${code_warnings[@]}" "need to run 'make gofmt'")
    fi
done

cd "${ROOT}"
if [ -f "${ROOT}/${COVERAGERC}" ] && [ -f "$COVERAGE_PROFILE" ]; then
    global_min_coverage=`jsonread "${ROOT}/${COVERAGERC}" min_coverage "$DEFAULT_MIN_COVERAGE"`
    echo "Overall coverage:"
    if ! gocovcheck "$COVERAGE_PROFILE" "$global_min_coverage"; then
	coverage_low=("${coverage_low[@]}" "Global coverage across all packages is low")
    fi
fi

exit_code=0

if [ ${#tests_failed[@]} -ne 0 ]; then
    echo "Tests failed in packages:"
    for pkg in "${tests_failed[@]}"; do
	echo "  $pkg"
    done
    exit_code=1
fi

if [ ${#coverage_low[@]} -ne 0 ]; then
    echo "Insufficient coverage in packages:"
    for pkg in "${coverage_low[@]}"; do
	echo "  $pkg"
    done
    exit_code=1
fi

if [ ${#code_warnings[@]} -ne 0 ]; then
    echo "Code quality:"
    for msg in "${code_warnings[@]}"; do
	echo "  $msg"
    done
    exit_code=1
fi

exit "$exit_code"
